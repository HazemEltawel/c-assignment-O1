// See https://aka.ms/new-console-template for more information
using System.Collections.Generic;
using System.Numerics;

internal class program
{      static void Main(string[] args)
    {
        Console.WriteLine("Hello, World!");
    }
}


//Compiler

// وهي لغة عالية المستوى الـ Compiler هو البرنامج اللي بيحوّل الكود اللي إنت بتكتبه بلغة C# 
//كيف تشتغل عملية الترجمة (Compilation) في C#
//لو عندك أخطاء في الكود (زي نسيان ; أو متغير مش متعرف)، الـ Compiler بيطلعلك Error قبل ما يتنفذ.
//بتعمل تحسين وبتنفذ الكود كامل (Optimization)

//Interpreter
//الـ Interpreter هو برنامج بيقوم بـ تنفيذ الكود سطر بسطر، بدل ما يترجمه كله مرّة واحدة زي الـ Compiler
//يترجم وينفذ سطر بسطر و لو فيه خطأ، هيقف عند أول خطأ يقابله وأبطأ لأنه بيترجم وقت التشغيل

//Programming languages use hybrid approaches ليه اللغات بتستخدم مثل ال java , python , c# , java script 
// و  تشغيل عبر منصات مختلفةو سهولة في اكتشاف الأخطاء و مرونة أكثر performance عشان

//انواع ال errors
//Syntax Error , Compile-Time Error,  Runtime Error, Logical Error, Exception

//Syntax Error ==> اسهل انواع الerrors
//	خطأ في الكتابة (بيحصل لما تكتب كود بشكل غير صحيح (زي نسيان ; أو قوس

//Compile - Time Error ==> سهلة برضو، بس تحتاج فهم للغة.
//خطأ وقت الترجمة
//بيظهر أثناء الـ compile (مثلاً متغير مش متعرف).

//Runtime Error (Exception) ==> أصعب شوية لازم تستخدم try-catch لمعالجتها
//بيحصل بعد ما الكود يشتغل، زي القسمة على صفر أو فتح ملف مش موجود.

//Logical Error ==> اصعب نوع من الاخطاء لانه مش بيظهر وقت التنفيذ 
//الكود بيشتغل بس النتيجة غلط (يعني ما فيش Error، لكن النتيجة مش اللي انت عايزها)

//File I/O Error ==>خطا فى التعامل مع لملفات مثلا قراءة ,كتابة ,تعديل ,حذف ,نسخ/نقل 


//Variable Declaration
//الـ Variable هو مكان في الذاكرة بنخزن فيه قيمة معينة.
//مثال int ==> عدد صحيح	 ==> int x = 10;
//double ==> عدد عشري==> double y = 3.14;
//string ==> نصوص	==> string name = "Ahmed";
//bool ==> صحيح أو خطأ	==> bool isTrue = true;
//char ==> حرف واحد	==> char letter = 'A';
//const ==> ثابت	==> const int MAX_VALUE = 100;
//var ==> نوع متغير غير محدد	==> var number = 5; // C# هيحدد النوع تلقائيًا
//يجب ان يتوافق اسم المتغير مع قواعد التسمية
//لا يمكن استخدام كلمات محجوزة (مثل int, string, if, else, etc.) كأسماء متغيرات.
//يجب أن يبدأ اسم المتغير بحرف أو underscore (_) ولا يمكن أن يبدأ برقم.
//يمكن استخدام الأحرف الكبيرة والصغيرة في أسماء المتغيرات، ولكن يفضل استخدام camelCase أو PascalCase.

//Common Type System (CTS)
//الـ CTS هو نظام في .NET يحدد أنواع البيانات الأساسية اللي ممكن تستخدمها في لغات البرمجة المختلفة.
//الهدف منه هو توفير توافق بين اللغات المختلفة في .NET.

//ليه CTS مهم؟
//تقدر تدمج لغات مختلفة جوه مشروع واحد
//تقدر تستخدم مكتبات مكتوبة بلغة تانية في مشروعك
//تقدر تشارك البيانات بين لغات مختلفة بسهولة

//Value Types
//الـ Value Types هي أنواع بيانات تخزن القيمة نفسها في الذاكرة.
//مثال: int, float, double, char, bool
//الـ Value Types بتخزن القيمة مباشرة في الذاكرة، يعني لو عملت نسخة من متغير، هتاخد نسخة مستقلة.

//Reference Types
//الـ Reference Types هي أنواع بيانات تخزن عنوان الذاكرة اللي فيه القيمة.
//مثال: string, class, array, delegate
//الـ Reference Types بتخزن عنوان الذاكرة، يعني لو عملت نسخة من متغير، هتاخد عنوان الذاكرة، وبالتالي أي تغيير في النسخة الأصلية هيأثر على النسخة الجديدة.

//Boxing
//الـ Boxing هو عملية تحويل الـ Value Type إلى Reference Type.
//Unboxing
//الـ Unboxing هو عملية تحويل الـ Reference Type إلى Value Type.
//إمتى نتجنب Boxing/Unboxing؟
//Boxing = نسخ القيمة من Stack إلى Heap
//Unboxing = استرجاع القيمة من Heap → Stack

//الفرق الأساسي بين Value و Reference
//Value Types:
//- تخزن القيمة نفسها في الذاكرة.
//- أسرع في الأداء.
//- لا تحتاج إلى Garbage Collection.
//- لا يمكن أن تكون null.

//Reference Types:
//- تخزن عنوان الذاكرة اللي فيه القيمة.
//- أبطأ في الأداء.
//- تحتاج إلى Garbage Collection.
//- يمكن أن تكون null.

//إمتى تستخدم Value Types

//بتتعامل مع بيانات بسيطة وصغيرة زي: أعداد صحيحة، أعداد عشرية، أحرف
//محتاج تخزن بيانات في Stack (الذاكرة الثابتة) عشان حجمها صغير
//بتحتاج أداء سريع (زي العمليات الحسابية البسيطة)

//إمتى تستخدم Reference Types

//بتتعامل مع بيانات معقدة أو كبيرة زي: كائنات، قوائم، مصفوفات
//محتاج تخزن بيانات في Heap (الذاكرة الديناميكية) عشان حجمها كبير
//بتحتاج تعدّل على نفس البيانات في أكتر من مكان (زي كائنات)

//Object
//الـ Object هو نوع بيانات عام في C#، وهو أساس كل أنواع البيانات.
//ممك نيخذن اى قيمة داخل Object
//يدعم ال boxing و unboxing

//إزاي تستفيد من object في مشاريعك

//تقدر تستخدمه لتخزين أي نوع من البيانات بدون الحاجة لتحديد النوع مسبقًا.
//تقدر تستخدمه في التعامل مع البيانات الديناميكية أو المتغيرة.
//تقدر تستخدمه في التعامل مع البيانات اللي مش محددة مسبقًا، زي البيانات اللي بتجي من API أو قواعد البيانات.
//تقدر تستخدمه في التعامل مع البيانات اللي بتحتاج تعديلات أو تغييرات مستمرة.
//تقدر تستخدمه في التعامل مع البيانات اللي بتحتاج تخزينها في هياكل بيانات مختلفة زي القوائم أو المصفوفات.
//تقدر تستخدمه في التعامل مع البيانات اللي بتحتاج تخزينها في ملفات أو قواعد بيانات.

//عيوب استخدام object
//- الأداء: استخدام object ممكن يكون أبطأ من استخدام الأنواع المحددة.
//- الذاكرة: استخدام object ممكن يستهلك ذاكرة أكثر بسبب الحاجة إلى Boxing و Unboxing.
//- الأمان: استخدام object ممكن يؤدي إلى أخطاء في وقت التشغيل لو حاولت تخزن نوع غير متوافق.
//- الصيانة: استخدام object ممكن يجعل الكود أقل وضوحًا وصعوبة في الصيانة.
//- التحقق من النوع: استخدام object ممكن يجعل التحقق من النوع في وقت التشغيل بدلًا من وقت الترجمة، مما يزيد من احتمالية الأخطاء.

//الفرق بين object و var و dynamic
//object: نوع ثابت، يعني لازم تحدد النوع مسبقًا، ولا يمكن تغييره لازم Casting
//var: نوع ديناميكي، يعني C# هيحدد النوع تلقائيًا بناءً على القيمة اللي بتخزنها.
//dynamic: نوع ديناميكي، يعني يمكن تغييره في وقت التشغيل، ولا يمكن التحقق من النوع في وقت الترجمة.

//Key Points about object in C#:

//- object هو نوع بيانات عام في C#.
//- يمكن استخدامه لتخزين أي نوع من البيانات.
//- يدعم Boxing و Unboxing.
//- يمكن استخدامه في التعامل مع البيانات الديناميكية أو المتغيرة.
//- يمكن استخدامه في التعامل مع البيانات اللي مش محددة مسبقًا.
//- يمكن استخدامه في التعامل مع البيانات اللي بتحتاج تعديلات أو تغييرات مستمرة.
//- يمكن استخدامه في التعامل مع البيانات اللي بتحتاج تخزينها في هياكل بيانات مختلفة.
//- يمكن استخدامه في التعامل مع البيانات اللي بتحتاج تخزينها في ملفات أو قواعد بيانات.
//Methods: object provides a set of methods that can be used across all types, such as 	
//ToString()
//Equals()
//GetHashCode()
//GetType().

//Generics
//الـ Generics في C# هو ميزة تسمح لك بإنشاء كود قابل لإعادة الاستخدام مع أنواع بيانات مختلفة بدون الحاجة لتكرار الكود.
//الهدف من الـ Generics هو توفير نوع ثابت (Type Safety) وأداء أفضل.
//الـ Generics يسمح لك بإنشاء فئات (Classes) ودوال (Methods) وقوائم (Collections) تعمل مع أنواع بيانات مختلفة بدون الحاجة لتكرار الكود.

//Set Of Behaviours [Functions]
//الـ Generics يسمح لك بإنشاء فئات ودوال وقوائم تعمل مع أنواع بيانات مختلفة بدون الحاجة لتكرار الكود.

//ToString()
//الـ ToString() هو دالة موجودة في كل كائن في C#، وتستخدم لتحويل الكائن إلى نص.
//الـ ToString() يمكن أن يتم Override في أي كائن لتوفير تمثيل نصي مخصص للكائن.

//فوائد استخدام ToString()
//- تسهيل عرض الكائنات في واجهات المستخدم.
//- تسهيل تصحيح الأخطاء عن طريق عرض معلومات مفيدة عن الكائن.
//- توفير تمثيل نصي للكائن يمكن استخدامه في السجلات أو التقارير.
//- يمكن استخدامه في تحويل الكائنات إلى نصوص لتخزينها في قواعد البيانات أو الملفات.

//Equals()
//الـ Equals() هو دالة موجودة في كل كائن في C#، وتستخدم لمقارنة كائنين للتحقق مما إذا كانا متساويين.
//الـ Equals() يمكن أن يتم Override في أي كائن لتوفير منطق مقارنة مخصص للكائن.

//فوائد استخدام Equals()
//- تسهيل مقارنة الكائنات في هياكل البيانات مثل القوائم والمجموعات.
//- تسهيل التحقق من التساوي بين الكائنات في العمليات الحسابية أو المنطقية.
//- توفير منطق مقارنة مخصص للكائنات، مثل مقارنة الخصائص أو الحقول.

//GetHashCode()
//الـ GetHashCode() هو دالة موجودة في كل كائن في C#، وتستخدم لإنشاء قيمة تجزئة (Hash Code) للكائن.
//الـ GetHashCode() يمكن أن يتم Override في أي كائن لتوفير منطق تجزئة مخصص للكائن.

//فوائد استخدام GetHashCode()
//- تسهيل استخدام الكائنات في هياكل البيانات مثل القوائم والمجموعات.
//- تحسين أداء البحث والتصفية في هياكل البيانات.
//- توفير منطق تجزئة مخصص للكائنات، مثل تجزئة الخصائص أو الحقول.

//GetType()
//الـ GetType() هو دالة موجودة في كل كائن في C#، وتستخدم للحصول على نوع الكائن.
//الـ GetType() يمكن استخدامه للحصول على معلومات عن نوع الكائن في وقت التشغيل.

//فوائد استخدام GetType()
//- تسهيل التحقق من نوع الكائن في وقت التشغيل.
//- تسهيل استخدام الكائنات في هياكل البيانات مثل القوائم والمجموعات.
//- توفير معلومات عن نوع الكائن في وقت التشغيل، مثل الخصائص والحقول والدوال المتاحة.

//نصائح عند كتابة GetHashCode()
//- يجب أن يكون GetHashCode() متسقًا مع Equals()، يعني إذا كان الكائنين متساويين، يجب أن يكون لهما نفس قيمة التجزئة.
//- يجب أن يكون GetHashCode() سريعًا في التنفيذ.
//- يجب أن يكون GetHashCode() فريدًا قدر الإمكان، يعني إذا كان الكائنين مختلفين، يجب أن يكون لهما قيم تجزئة مختلفة.

//فرق بين typeof() و GetType()
//typeof() هو دالة تستخدم للحصول على نوع ثابت (Type) في وقت الترجمة، بينما GetType() هو دالة تستخدم للحصول على نوع الكائن في وقت التشغيل.
